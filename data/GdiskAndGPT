;2 GPT
To read GPT table, use
 # gpt -r show /dev/disk?
Information for this came from https://apple.stackexchange.com/questions/209208/creating-a-partition-in-unallocated-space and https://developer.apple.com/library/content/technotes/tn2166/_index.html.

;3 Sample gpt -r show results external disk /dev/disk3:

CURRENT (start) gpt output:
 start	size  index  contents
           0	   1	 PMBR
           1	   1	 Pri GPT header
           2	  32	 Pri GPT table
          34	   6	 
          40      409600      1  GPT part - C12A7328-F81F-11D2-BA4B-00A0C93EC93B
      409640   332031256      2  GPT part - 48465300-0000-11AA-AA11-00306543ECAC
   332440896      262144	 
   332703040   500000000      3  GPT part - 48465300-0000-11AA-AA11-00306543ECAC
   832703040      262144	 
   832965184     1269536      4  GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC
   834234720  1119290415	 
  1953525135	  32	 Sec GPT table
  1953525167	   1	 Sec GPT header512 bytes per block (size and start in blocks)
Last column is GUIDs-- 
	C12A7... is EFI partition       
	486653.. is HFS+ partition
	426f6... is Rescue partition
134 MB is used as a buffer between partitions to ensure installer programs don't overwrite neighboring partitions
Paritions must start on 4kb boundaries (e.g., block starts must be divisible by 8, 8*512bytes is 4kB)

;3 backing up partition table
To back up the partition table, use our friend dd:
 # diskutil umountDisk /dev/disk3
 # dd if=/dev/disk3 of=GPT_disk3_table_bkup.bin bs=512 count=34

Notes:
;#Since gpt -r show /dev/disk3 gives the above output, the PMBR Pri GPT header & table are in the first 32 blocks. (PMBR= protective MBR used in GPT so that "old school" MBR utilities see that the entire disk is used.)
;#The entire disk must be unmounted before dd can write to it. On the MAC, the best way to do this is with diskutil umountdisk
;#MBR disks store the loader in the first sector only-- however other stuff may follow between that and the first partition, so it's best to grab everything up until the first partition.

;3 Restoring the partition table
To restore the table, likewise use
 # dd of=/dev/disk3 if=GPT_disk3_table_bkup.bin bs=512 count=34




;2 Adding new GPT partitions
ADDING a new partition into empty space on a disk:
1. Diskutil can't do it. Use GPT!
2. For above (/dev/disk3 sample output), we want to buffer with at least 128MB empty space (262144 blocks * 512 bytes/block /1048576 bytes/MB = 128MB).
3 The start of the "empty space" is at 834234720, so we will start at this +262144: 834496864. Fortunately, this is divisible by 8, so it is at a 4K boundary.
4. We want a size of 15GB, which is 15*10^9 bytes/512 bytes per block=29296875 blocks.
	NOTE: It helps to use a spreadsheet to verify our calculations!

5. Last index was 4, so we will choose our (unique) index as 5.
6. We want an HFS+ file system, so our GUIDType will be 48465300-0000-11AA-AA11-00306543ECAC

Notes:
;=   ;# Windows likes the Basic Data Partition (BDP) which can be formatted with any filesystem (NTFS, FAT, etc.) BDP's GUID: EBD0A0A2-B9E5-4433-87C0-68B6B72699C7

;=   ;# gpt allows these aliases for GUIDTypes:
		efi, hfs, apfs, linux, and windows; so BDP's GUID is simply "windows" (without the quotes)

7. In general, the command to create a new partition into empty space is 
 # gpt add -b StartBlock -i IndexNumber -s SizeInBlocks -t GUIDType /dev/disk?
8. After creation, use disk utility (or diskutil) to format it using "erase"

So the  command to create our  new partition will be:
 # gpt add -b 834496864 -i 5 -s 29296875 -t 48465300-0000-11AA-AA11-00306543ECAC /dev/disk3

NOTE: "unable to open device '/dev/disk?': Resource busy means you forgot to do "diskutil unmountdisk /dev/disk?" before the gpt command.

********************************************************
P.S.: OOPS!!! The size we gave is NOT divisible by 4-- it should have been -s 29296880!! No problem with this partition (index 5), just a bit of wasted space at the end-- BUT now the NEXT partition doesn't start on a boundary divisible by 8!!! Again, since we will pad this with 128MB, we are OK-- just need to ensure the next partition we will actually access starts on a block boundary divisible by 8. In our case, this block would be 864055888.

Here's the partition table after we've added our little 15GB mac partition, and another 170G partition for the new windows backup:
 # gpt -r show /dev/disk4 
 start	size  index  contents
           0	       1	 PMBR
           1	       1	 Pri GPT header
           2	      32	 Pri GPT table
          34	       6	 
          40      409600      1  GPT part - C12A7328-F81F-11D2-BA4B-00A0C93EC93B
      409640   332031256      2  GPT part - 48465300-0000-11AA-AA11-00306543ECAC
   332440896      262144	 
   332703040   500000000      3  GPT part - 48465300-0000-11AA-AA11-00306543ECAC
   832703040      262144	 
   832965184     1269536      4  GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC
   834234720      262144	 
   834496864    29296875      5  GPT part - 48465300-0000-11AA-AA11-00306543ECAC
   863793739      262149	 
   864055888   332031256      6  GPT part - EBD0A0A2-B9E5-4433-87C0-68B6B72699C7
  1196087144   757437991	 
  1953525135	  32	 Sec GPT table
  1953525167	   1	 Sec GPT header
# 

WINDOWS and GPT:
To boot Windows from a GPT partition, the computer must support UEFI. However, the macbook uses the original Intel EFI standard, NOT UEFI, so it does not support booting of Windows off of a GPT parition.

So a macbook disk mustch be formatted MBR for windows to boot.

gdisk, on the clonezilla CD, can convert to and from MBR and GPT formats-- see "r" option. AFTER converting to MBR, you need to copy a working windows MBR to the first sector-- I suspect gdisk puts in a linux boot sector? To do this:
1) Locate a valid Windows MBR
2) Unmount MBR disk (let's say its the internal drive, /dev/disk0)
	diskutil unmountdisk /dev/disk0
3) As superuser, copy the MBR to the disk:
	dd if=MBR.bin of=/dev/disk0 bs=512 count=1

Now it should boot.
